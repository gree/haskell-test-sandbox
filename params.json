{"name":"GREE Haskell test-sandbox","tagline":"A framework to manage external applications for system tests","body":"### Description\r\ntest-sandbox is a framework to manage external applications and communicate with them via TCP or standard I/O for system testing in a sandboxed environment.\r\nThe Test.Sandbox monad can either be used stand-alone or in conjunction with HUnit, QuickCheck and the test-framework packages to build a complete test suite.\r\nThe API is meant to be simple to understand yet flexible enough to meet most of the needs of application testers.\r\n\r\n### Features\r\n* Register, start and stop programs in a sandboxed environment.\r\n* Automatic cleaning at shutdown: started processes are shutdown, temporary files are deleted.\r\n* Ask the framework to provide you with random, guaranteed not bound TCP ports for your tests: no more collisions when running 2 sets of tests at the same time.\r\n* Generate your temporary configuration files programatically in a secure manner.\r\n* Easily share variables between your tests and modify them at runtime.\r\n* Combine with the test-framework package for standardized output and XML test result generation.\r\n* Use the QuickCheck library to write property tests and generate automatic test cases for your external application; enjoy the full power of the Haskell test harness, even if the application to test is written in a different language!\r\n\r\n### Examples\r\nA simple test for the memcached NoSQL key-value store, with communication via TCP.\r\n```haskell\r\nimport Test.Sandbox\r\nimport Test.Sandbox.HUnit\r\n\r\nsetup :: Sandbox ()\r\nsetup = do\r\n  port <- getPort \"memcached\"\r\n  register \"memcached\" \"memcached\" [ \"-p\", show port ] def\r\n\r\nmain :: IO ()\r\nmain = sandbox $ do\r\n  setup\r\n  start \"memcached\"\r\n  output <- sendTo \"memcached\" \"set key 0 0 5\\r\\nvalue\\r\\n\" 1\r\n  assertEqual \"item is stored\" \"STORED\\r\\n\" output\r\n```\r\n\r\nA simple hypothetic test for the \"sed\" UNIX command-line utility, with communication via standard I/O.\r\n```haskell\r\nimport Test.Sandbox\r\nimport Test.Sandbox.HUnit\r\n\r\nmain :: IO ()\r\nmain = sandbox $ do\r\n  start =<< register \"sed_regex\" \"sed\" [ \"-u\", \"s/a/b/\" ] def { psCapture = CaptureStdout }\r\n  assertEqual \"a->b\" \"b\\n\" =<< interactWith \"sed_regex_ \"a\\n\" 5\r\n```\r\nHere is how to cram the above in the Test.Framework module.\r\n```haskell\r\nimport Test.Framework\r\nimport Test.Framework.Providers.Sandbox\r\nimport Test.Sandbox\r\nimport Test.Sandbox.HUnit\r\n\r\nsetup :: Sandbox ()\r\nsetup = start =<< register \"sed_s/a/b/\" \"sed\" [ \"-u\", \"s/a/b/\" ] def { psCapture = CaptureStdout }\r\n\r\nmain = defaultMain [\r\n    sandboxTests \"sed_tests\" [\r\n        sandboxTest \"setup\" setup\r\n      , sandboxTest \"sed a->b\" $ assertEqual \"a->b\" \"b\\n\" =<< interactWith \"sed_s/a/b/\" \"a\\n\" 5\r\n      , sandboxTest \"sed aa->ba\" $ assertEqual \"aa->ba\" \"ba\\n\" =<< interactWith \"sed_s/a/b/\" \"aa\\n\" 5\r\n    ]\r\n  ]\r\n```\r\nGenerated output\r\n```bash\r\nbenjamin-surma@g-pc-3964:~/Documents/memcached-tests$ ./dist/build/test/test\r\n[sed_tests]\r\n  [setup]\r\n\r\n##------------------------------------------------------------------------------\r\n ## sed_tests end-to-end test environment                                     --\r\n## ##---------------------------------------------------------------------------\r\n-- Data directory: /tmp/sed_tests_20474\r\n-- Allocated ports: \r\n-- Configuration files: \r\n-- Registered processes: sed_s/a/b/\r\n--------------------------------------------------------------------------------\r\n\r\nStarting process sed_s/a/b/... Done.\r\n[OK]\r\n  [sed a->b]  [OK]\r\n  [sed aa->ba]  [OK]\r\nsed_tests:\r\n  setup: [OK]\r\n  sed a->b: [OK]\r\n  sed aa->ba: [OK]\r\n  cleaning: [OK]\r\n\r\n         Sandbox tests  Total      \r\n Passed  4              3          \r\n Failed  0              0          \r\n Total   4              4          \r\nbenjamin-surma@g-pc-3964:~/Documents/memcached-tests$ \r\n```\r\n\r\n### Synopsis\r\nAt GREE, we spend lots of time meticulously testing our internally-developed middleware.\r\nWe have solutions not only developed in Haskell, but also C++ and PHP, but wanted a simple and robust test framework to perform end-to-end testing, and this is how test-sandbox is born.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}